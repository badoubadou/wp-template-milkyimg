// Generated by CoffeeScript 1.10.0
var up;

up = (function() {
  function up($uploadmodule) {
    this.$uploadmodule = $uploadmodule;
    console.log('upload');
    this.$btn = this.$uploadmodule.find('#filesToUpload');
    this.$filesToUpload = document.getElementById('filesToUpload');
    this.$fileList = this.$uploadmodule.find('#fileList');
    this.setOptions();
    this.init();
  }

  up.prototype.setOptions = function() {
    this.$path = void 0;
    this.$foldercont = void 0;
    this.$totalbites = 0;
    this.$uploadedbites = 0;
    this.$indexsend = 0;
    $('.bulle').removeClass('visible');
    this.$selected_folder = $('.selected_folder');
    this.$targetfolder = this.$selected_folder.is('li') ? this.$selected_folder.parent() : this.$selected_folder.find('ul');
    this.$path = this.$selected_folder.data('path');
    this.$list = this.$selected_folder.data('list');
    this.$check = this.$selected_folder.data('check');
    $('.progresslevel').css('width', '0%');
    $('.progresstotal').css('width', '0%');
    $('#uploadedbites').val(0);
    $('#totalbites').val(0);
    $('.bulle').removeClass('visible');
    return $('#uploadedbites').value = 0;
  };

  up.prototype.setListUpload = function() {
    var i;
    this.$fileList.empty();
    i = 0;
    while (i < this.$filesToUpload.files.length) {
      this.$fileList.append('<li>' + this.$filesToUpload.files[i].name + '</li>');
      i++;
    }
    if (!this.$fileList.find('li').length) {
      return this.$fileList.append('<li>No Files Selected</li>');
    } else {
      return $('.bulle').addClass('visible');
    }
  };

  up.prototype.setTotalSize = function() {
    var file, i;
    i = 0;
    console.log(this.$filesToUpload.files[0]);
    while (i < this.$filesToUpload.files.length) {
      file = this.$filesToUpload.files[i];
      this.$totalbites += file.size;
      i++;
    }
    $('#totalbites').val(this.$totalbites);
    console.log(this.$totalbites);
  };

  up.prototype.uploadFile = function(myfile) {
    var _that, ajax, formdata;
    _that = this;
    if (!myfile) {
      myfile = this.$filesToUpload.files[0];
    }
    if (!myfile) {
      return false;
    }
    formdata = new FormData;
    formdata.append('file1', myfile);
    ajax = new XMLHttpRequest;
    ajax.upload.addEventListener('progress', this.progressHandler, false);
    ajax.addEventListener('load', (function(event) {
      _that.completeHandler(event, _that);
    }), false);
    ajax.addEventListener('error', (function(event) {
      _that.errorHandler(event, _that);
    }), false);
    ajax.addEventListener('abort', this.abortHandler, false);
    ajax.open('POST', 'php/file_upload_parser.php?path=' + this.$path + '&type=' + $('#filesToUpload').data('type'));
    ajax.send(formdata);
  };

  up.prototype.progressHandler = function(event) {
    var percent, percenttotal, totalbites, uploadedbites;
    uploadedbites = parseInt($('#uploadedbites').val()) + parseInt(event.loaded);
    totalbites = parseInt($('#totalbites').val());
    percent = event.loaded / event.total * 100;
    percenttotal = uploadedbites / totalbites * 100;
    percenttotal = percenttotal > 100 ? 100 : percenttotal;
    $('#uploadedbites').val(uploadedbites);
    $('#loaded_n_total').html('Uploaded ' + uploadedbites / 100 + 'KB of ' + totalbites / 100 + 'KB');
    $('.progresslevel').css('width', Math.round(percent) + '%');
    $('.progresstotal').css('width', Math.round(percenttotal) + '%');
    $('#status').html(Math.round(percenttotal) + '% uploaded... please wait');
  };

  up.prototype.updateListServer = function(infophp) {
    var $img, $newli, $newnamediv, $newpreviewimg, cloud;
    this.$fileList.find('li:first').remove();
    $('#' + this.$check).prop('checked', true);
    $('.selected_folder').removeClass('selected_folder');
    $newli = $('<li>', {
      'data-path': infophp['path'].replace('../', ''),
      'data-path-file': infophp['path'].replace('../', '') + infophp['name'],
      'data-type': $('#filesToUpload').data('type'),
      "class": 'selected_folder'
    });
    $newnamediv = $('<div>', {
      "class": 'name'
    });
    $newnamediv.text(infophp['name']);
    if ($('#filesToUpload').data('type') === 'img') {
      $newpreviewimg = $('<div>', {
        "class": 'contimg'
      });
      $img = $('<img>', {
        src: infophp['path'] + infophp['name']
      });
      $newpreviewimg.append($img);
      $newli.append($newpreviewimg);
    }
    $newli.append($newnamediv);
    this.$targetfolder.append($newli);
    cloud = new module.cloud($('#cloud')).updatebind($newli);
  };

  up.prototype.completeHandler = function(event, param) {
    var infophp, stringjson;
    console.log('completeHandler' + event.target.responseText);
    stringjson = event.target.responseText.toString();
    infophp = JSON.parse(stringjson);
    param.updateListServer(infophp);
    if (this.$filesToUpload.files.length - 1 > param.$indexsend) {
      param.$indexsend += 1;
      param.uploadFile(this.$filesToUpload.files[param.$indexsend]);
    } else {
      param.setOptions();
    }
  };

  up.prototype.errorHandler = function(event, param) {
    param.$fileList.find('li:first').addClass('error');
    $('#status').html('Upload Failed');
  };

  up.prototype.abortHandler = function(event) {
    $('#status').html('Upload Aborted');
  };

  up.prototype.init = function() {
    return this.bindEvents();
  };

  up.prototype.bindEvents = function() {
    var _that;
    console.log('bind!');
    _that = this;
    return $('#filesToUpload').change(function() {
      _that.setOptions();
      _that.setListUpload();
      _that.setTotalSize();
      _that.uploadFile();
      console.log('changed!' + _that.$totalbites);
    });
  };

  return up;

})();

module.up = up;
