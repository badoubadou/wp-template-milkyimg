// Generated by CoffeeScript 1.10.0
var addblocks;

addblocks = (function() {
  function addblocks($container) {
    this.$container = $container;
    this.setOptions();
    this.bindEvents();
  }

  addblocks.prototype.setOptions = function() {
    var colorfirst, parentdiv;
    console.log(this.$container.html());
    this.$btn = this.$container.find('.btnadd');
    this.$radiobtn = this.$container.find('input:radio');
    parentdiv = this.$radiobtn.parent();
    colorfirst = parentdiv.find('input:checked').parent().find('label').css('background');
    console.log('background : ??? ' + colorfirst);
    return this.$btn.css('background', colorfirst);
  };

  addblocks.prototype.returnid = function() {
    var $newid, d;
    d = new Date;
    $newid = d.getTime();
    return $newid;
  };

  addblocks.prototype.getContext = function($el1) {
    this.$el = $el1;
    this.$blockid = this.$el.data('insert-after');
    console.log('@$blockid = ' + this.$blockid);
    this.$level = this.$el.data('level');
    this.$addblocksdiv = this.$el.parent();
    this.$need_repeater = this.$el.data('add-repeater');
    this.$repeater_on_top = $('#' + this.$blockid).parent();
    return this.$type = this.$addblocksdiv.find('.warpinput.typemodule input[type="radio"]:checked').val();
  };

  addblocks.prototype.updateIdChecker = function($el, $levelblock, $id) {
    var labelnamecolor, labelnametype;
    $el.find('.bin').data('id-to-remove', $id).attr('data-id-to-remove', $id);
    $el.find('.btnadd').data('level', $levelblock).attr('data-level', $levelblock).data('insert-after', $id).attr('data-insert-after', $id);
    labelnametype = 'type' + (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    labelnamecolor = 'type' + (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    $el.find('.warpinput.color').each(function(index) {
      var labelid;
      labelid = 'color' + (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      $(this).find('input').attr('name', labelnamecolor).attr('id', labelid);
      $(this).find('label').attr('for', labelid);
    });
    return $el.find('.warpinput.typemodule').each(function(index) {
      var labelid;
      labelid = 'type' + (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      $(this).find('input').attr('name', labelnametype).attr('id', labelid);
      $(this).find('label').attr('for', labelid);
    });
  };

  addblocks.prototype.creatBlock = function() {
    var $block, $id, $levelblock, $new_repeater, $repeater, $ret;
    this.$id = 'module' + this.returnid();
    this.$newblock = $('#samples').find('.blocks.' + this.$type);
    console.log('--- @$type =  ' + this.$type);
    $levelblock = this.$level;
    if (this.$need_repeater) {
      $levelblock += 1;
    }
    $block = this.$newblock.clone().attr('id', this.$id).attr('data-type', this.$type).attr('class', 'blocks ' + this.$type + ' level-' + $levelblock);
    $block.find('.warper.level-').removeClass('level-').addClass('level-' + $levelblock);
    this.updateIdChecker($block.find('.listbtnright'), $levelblock, this.$id);
    new module.updateclassoption($block.find('.listbtnright'));
    $ret = $block;
    if (this.$need_repeater) {
      $id = 'module' + this.returnid();
      $new_repeater = $('#samples').find('.blocks.repeater');
      $repeater = $new_repeater.clone().attr('id', $id).attr('data-type', 'repeater').attr('class', 'blocks repeater level-' + this.$level);
      $repeater.find('.warper.level-').removeClass('level-').addClass('level-' + this.$level);
      $block.addClass('col-12');
      this.updateIdChecker($repeater.find('.listbtnright'), this.$level, $id);
      new module.updateclassoption($repeater.find('.listbtnright'));
      $repeater.find('.content').append($block);
      $ret = $repeater;
    }
    return $ret;
  };

  addblocks.prototype.insertBlock = function() {
    var addnewblocks, addslide, info, intromusic, name, removeblocks, showserver, titremusic, txt, txtedit, txtintro;
    $('#main').sortable('destroy');
    this.$cloned = this.creatBlock();
    this.$cloned.insertAfter('#' + this.$blockid);
    if (!this.$need_repeater) {
      new module.updatecolsize(this.$repeater_on_top, this.$level);
    }
    if (this.$type === 'txt') {
      txtedit = new module.txteditor('#' + this.$id + ' .editable');
    }
    if (this.$type === 'music') {
      titremusic = new module.txteditor('#' + this.$id + ' .titre');
      intromusic = new module.txteditor('#' + this.$id + ' .intro');
      showserver = new module.showcloud($('#' + this.$id + ' .showcloud'));
    }
    if (this.$type === 'perso') {
      addslide = new module.addpersons($('#' + this.$id));
      info = new module.txteditor('#' + this.$id + ' .infos');
      name = new module.txteditor('#' + this.$id + ' .name');
      showserver = new module.showcloud($('#' + this.$id + ' img'));
    }
    if (this.$type === 'img') {
      addslide = new module.addslides($('#' + this.$id));
      txt = new module.txteditor('#' + this.$id + ' .flex-caption');
      txtintro = new module.txteditor('#' + this.$id + ' .intro');
      showserver = new module.showcloud($('#' + this.$id + ' img'));
    }
    addnewblocks = new module.addblocks($('#' + this.$id));
    removeblocks = new module.removeblocks(this.$cloned.find('.bin'));
    $('#main').sortable({
      handle: '.handle'
    });
    return $('body').addClass('savable');
  };

  addblocks.prototype.bindEvents = function() {
    this.$radiobtn.change(function() {
      var color, plusbtn;
      color = $(this).parent().find('label').css('background');
      plusbtn = $(this).parent().parent().find('button.btnadd');
      plusbtn.css('background', color);
      return console.log(color);
    });
    return this.$btn.on('click', (function(_this) {
      return function(event) {
        _this.getContext($(event.currentTarget));
        return _this.insertBlock();
      };
    })(this));
  };

  return addblocks;

})();

module.addblocks = addblocks;
